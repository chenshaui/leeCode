# -*- coding:utf-8 -*-

"""
# File       : 7_不同路径.py
# Time       : 2024/2/19 10:33
# Author     : ASUS
# version    : python 3.8
# Description: 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
#
# 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
#
# 问总共有多少条不同的路径？
#
#
#
# 示例 1：
#
#
# 输入：m = 3, n = 7
# 输出：28
# 示例 2：
#
# 输入：m = 3, n = 2
# 输出：3
# 解释：
# 从左上角开始，总共有 3 条路径可以到达右下角。
# 1. 向右 -> 向下 -> 向下
# 2. 向下 -> 向下 -> 向右
# 3. 向下 -> 向右 -> 向下
# 示例 3：
#
# 输入：m = 7, n = 3
# 输出：28
# 示例 4：
#
# 输入：m = 3, n = 3
# 输出：6
#
#
# 提示：
#
# 1 <= m, n <= 100
# 题目数据保证答案小于等于 2 * 109
"""


class Solution(object):
    def uniquePaths(self, m, n):
        """
        :type m: int
        :type n: int
        :rtype: int
        """
        # 采用二位数组形式的动态规划
        # f[i][j]表示当前移动到的总次数，要求f[-1][-1]
        # 状态转移公式：f[i][j] = f[i-1][j]+f[i][j-1]
        # 初始值：每一步移动的次数可以看做横轴和纵轴的和，因此 f[i][0] = 1,f[0][j]=1
        # 运动的轨迹：要么往下，要么往左
        # 时间复杂度：O(m*n),空间复杂度：O(m*n)

        # dp = [[1] * n for _ in range(m)]
        # for i in range(1, m):
        #     for j in range(1, n):
        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]

        # return dp[-1][-1]

        """优化空间复杂度为O(n)"""
        # 对二维矩阵进行压缩成一位数组,将最新生成的值覆盖掉旧的值,逐行求解当前位置的最新路径条数！
        # 实质：在于动态计算并替换当前位置下的路径数最新值
        # 状态转移公式变成：f[i] = f[i-1]+f[i]
        # 初始值： f = [1]*m,取横轴
        # f[-1]表示可能路径的总数
        # 空间复杂度：O(n),时间复杂度:O(m*n)

        f = [1] * m
        for j in range(1, n):
            for i in range(1, m):
                f[i] = f[i - 1] + f[i]
        return f[-1]

